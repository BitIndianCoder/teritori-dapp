// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pathwar/v1/pathwar.proto

package pathwarpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PathwarServiceClient is the client API for PathwarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PathwarServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (PathwarService_RegisterUserClient, error)
	Leaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (PathwarService_LeaderboardClient, error)
	Resources(ctx context.Context, in *ResourcesRequest, opts ...grpc.CallOption) (PathwarService_ResourcesClient, error)
	Tournaments(ctx context.Context, in *TournamentsRequest, opts ...grpc.CallOption) (PathwarService_TournamentsClient, error)
	Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (PathwarService_ChallengeClient, error)
	ChallengeListing(ctx context.Context, in *ChallengeListingRequest, opts ...grpc.CallOption) (PathwarService_ChallengeListingClient, error)
	ChallengeValidate(ctx context.Context, in *ChallengeValidateRequest, opts ...grpc.CallOption) (PathwarService_ChallengeValidateClient, error)
}

type pathwarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPathwarServiceClient(cc grpc.ClientConnInterface) PathwarServiceClient {
	return &pathwarServiceClient{cc}
}

func (c *pathwarServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (PathwarService_RegisterUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &PathwarService_ServiceDesc.Streams[0], "/pathwar.v1.PathwarService/RegisterUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathwarServiceRegisterUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PathwarService_RegisterUserClient interface {
	Recv() (*RegisterUserResponse, error)
	grpc.ClientStream
}

type pathwarServiceRegisterUserClient struct {
	grpc.ClientStream
}

func (x *pathwarServiceRegisterUserClient) Recv() (*RegisterUserResponse, error) {
	m := new(RegisterUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pathwarServiceClient) Leaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (PathwarService_LeaderboardClient, error) {
	stream, err := c.cc.NewStream(ctx, &PathwarService_ServiceDesc.Streams[1], "/pathwar.v1.PathwarService/Leaderboard", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathwarServiceLeaderboardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PathwarService_LeaderboardClient interface {
	Recv() (*LeaderboardResponse, error)
	grpc.ClientStream
}

type pathwarServiceLeaderboardClient struct {
	grpc.ClientStream
}

func (x *pathwarServiceLeaderboardClient) Recv() (*LeaderboardResponse, error) {
	m := new(LeaderboardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pathwarServiceClient) Resources(ctx context.Context, in *ResourcesRequest, opts ...grpc.CallOption) (PathwarService_ResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PathwarService_ServiceDesc.Streams[2], "/pathwar.v1.PathwarService/Resources", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathwarServiceResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PathwarService_ResourcesClient interface {
	Recv() (*ResourcesResponse, error)
	grpc.ClientStream
}

type pathwarServiceResourcesClient struct {
	grpc.ClientStream
}

func (x *pathwarServiceResourcesClient) Recv() (*ResourcesResponse, error) {
	m := new(ResourcesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pathwarServiceClient) Tournaments(ctx context.Context, in *TournamentsRequest, opts ...grpc.CallOption) (PathwarService_TournamentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PathwarService_ServiceDesc.Streams[3], "/pathwar.v1.PathwarService/Tournaments", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathwarServiceTournamentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PathwarService_TournamentsClient interface {
	Recv() (*TournamentsResponse, error)
	grpc.ClientStream
}

type pathwarServiceTournamentsClient struct {
	grpc.ClientStream
}

func (x *pathwarServiceTournamentsClient) Recv() (*TournamentsResponse, error) {
	m := new(TournamentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pathwarServiceClient) Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (PathwarService_ChallengeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PathwarService_ServiceDesc.Streams[4], "/pathwar.v1.PathwarService/Challenge", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathwarServiceChallengeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PathwarService_ChallengeClient interface {
	Recv() (*ChallengeResponse, error)
	grpc.ClientStream
}

type pathwarServiceChallengeClient struct {
	grpc.ClientStream
}

func (x *pathwarServiceChallengeClient) Recv() (*ChallengeResponse, error) {
	m := new(ChallengeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pathwarServiceClient) ChallengeListing(ctx context.Context, in *ChallengeListingRequest, opts ...grpc.CallOption) (PathwarService_ChallengeListingClient, error) {
	stream, err := c.cc.NewStream(ctx, &PathwarService_ServiceDesc.Streams[5], "/pathwar.v1.PathwarService/ChallengeListing", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathwarServiceChallengeListingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PathwarService_ChallengeListingClient interface {
	Recv() (*ChallengeListingResponse, error)
	grpc.ClientStream
}

type pathwarServiceChallengeListingClient struct {
	grpc.ClientStream
}

func (x *pathwarServiceChallengeListingClient) Recv() (*ChallengeListingResponse, error) {
	m := new(ChallengeListingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pathwarServiceClient) ChallengeValidate(ctx context.Context, in *ChallengeValidateRequest, opts ...grpc.CallOption) (PathwarService_ChallengeValidateClient, error) {
	stream, err := c.cc.NewStream(ctx, &PathwarService_ServiceDesc.Streams[6], "/pathwar.v1.PathwarService/ChallengeValidate", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathwarServiceChallengeValidateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PathwarService_ChallengeValidateClient interface {
	Recv() (*ChallengeValidateResponse, error)
	grpc.ClientStream
}

type pathwarServiceChallengeValidateClient struct {
	grpc.ClientStream
}

func (x *pathwarServiceChallengeValidateClient) Recv() (*ChallengeValidateResponse, error) {
	m := new(ChallengeValidateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PathwarServiceServer is the server API for PathwarService service.
// All implementations must embed UnimplementedPathwarServiceServer
// for forward compatibility
type PathwarServiceServer interface {
	RegisterUser(*RegisterUserRequest, PathwarService_RegisterUserServer) error
	Leaderboard(*LeaderboardRequest, PathwarService_LeaderboardServer) error
	Resources(*ResourcesRequest, PathwarService_ResourcesServer) error
	Tournaments(*TournamentsRequest, PathwarService_TournamentsServer) error
	Challenge(*ChallengeRequest, PathwarService_ChallengeServer) error
	ChallengeListing(*ChallengeListingRequest, PathwarService_ChallengeListingServer) error
	ChallengeValidate(*ChallengeValidateRequest, PathwarService_ChallengeValidateServer) error
	mustEmbedUnimplementedPathwarServiceServer()
}

// UnimplementedPathwarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPathwarServiceServer struct {
}

func (UnimplementedPathwarServiceServer) RegisterUser(*RegisterUserRequest, PathwarService_RegisterUserServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedPathwarServiceServer) Leaderboard(*LeaderboardRequest, PathwarService_LeaderboardServer) error {
	return status.Errorf(codes.Unimplemented, "method Leaderboard not implemented")
}
func (UnimplementedPathwarServiceServer) Resources(*ResourcesRequest, PathwarService_ResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method Resources not implemented")
}
func (UnimplementedPathwarServiceServer) Tournaments(*TournamentsRequest, PathwarService_TournamentsServer) error {
	return status.Errorf(codes.Unimplemented, "method Tournaments not implemented")
}
func (UnimplementedPathwarServiceServer) Challenge(*ChallengeRequest, PathwarService_ChallengeServer) error {
	return status.Errorf(codes.Unimplemented, "method Challenge not implemented")
}
func (UnimplementedPathwarServiceServer) ChallengeListing(*ChallengeListingRequest, PathwarService_ChallengeListingServer) error {
	return status.Errorf(codes.Unimplemented, "method ChallengeListing not implemented")
}
func (UnimplementedPathwarServiceServer) ChallengeValidate(*ChallengeValidateRequest, PathwarService_ChallengeValidateServer) error {
	return status.Errorf(codes.Unimplemented, "method ChallengeValidate not implemented")
}
func (UnimplementedPathwarServiceServer) mustEmbedUnimplementedPathwarServiceServer() {}

// UnsafePathwarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PathwarServiceServer will
// result in compilation errors.
type UnsafePathwarServiceServer interface {
	mustEmbedUnimplementedPathwarServiceServer()
}

func RegisterPathwarServiceServer(s grpc.ServiceRegistrar, srv PathwarServiceServer) {
	s.RegisterService(&PathwarService_ServiceDesc, srv)
}

func _PathwarService_RegisterUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PathwarServiceServer).RegisterUser(m, &pathwarServiceRegisterUserServer{stream})
}

type PathwarService_RegisterUserServer interface {
	Send(*RegisterUserResponse) error
	grpc.ServerStream
}

type pathwarServiceRegisterUserServer struct {
	grpc.ServerStream
}

func (x *pathwarServiceRegisterUserServer) Send(m *RegisterUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PathwarService_Leaderboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LeaderboardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PathwarServiceServer).Leaderboard(m, &pathwarServiceLeaderboardServer{stream})
}

type PathwarService_LeaderboardServer interface {
	Send(*LeaderboardResponse) error
	grpc.ServerStream
}

type pathwarServiceLeaderboardServer struct {
	grpc.ServerStream
}

func (x *pathwarServiceLeaderboardServer) Send(m *LeaderboardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PathwarService_Resources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PathwarServiceServer).Resources(m, &pathwarServiceResourcesServer{stream})
}

type PathwarService_ResourcesServer interface {
	Send(*ResourcesResponse) error
	grpc.ServerStream
}

type pathwarServiceResourcesServer struct {
	grpc.ServerStream
}

func (x *pathwarServiceResourcesServer) Send(m *ResourcesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PathwarService_Tournaments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TournamentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PathwarServiceServer).Tournaments(m, &pathwarServiceTournamentsServer{stream})
}

type PathwarService_TournamentsServer interface {
	Send(*TournamentsResponse) error
	grpc.ServerStream
}

type pathwarServiceTournamentsServer struct {
	grpc.ServerStream
}

func (x *pathwarServiceTournamentsServer) Send(m *TournamentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PathwarService_Challenge_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChallengeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PathwarServiceServer).Challenge(m, &pathwarServiceChallengeServer{stream})
}

type PathwarService_ChallengeServer interface {
	Send(*ChallengeResponse) error
	grpc.ServerStream
}

type pathwarServiceChallengeServer struct {
	grpc.ServerStream
}

func (x *pathwarServiceChallengeServer) Send(m *ChallengeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PathwarService_ChallengeListing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChallengeListingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PathwarServiceServer).ChallengeListing(m, &pathwarServiceChallengeListingServer{stream})
}

type PathwarService_ChallengeListingServer interface {
	Send(*ChallengeListingResponse) error
	grpc.ServerStream
}

type pathwarServiceChallengeListingServer struct {
	grpc.ServerStream
}

func (x *pathwarServiceChallengeListingServer) Send(m *ChallengeListingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PathwarService_ChallengeValidate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChallengeValidateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PathwarServiceServer).ChallengeValidate(m, &pathwarServiceChallengeValidateServer{stream})
}

type PathwarService_ChallengeValidateServer interface {
	Send(*ChallengeValidateResponse) error
	grpc.ServerStream
}

type pathwarServiceChallengeValidateServer struct {
	grpc.ServerStream
}

func (x *pathwarServiceChallengeValidateServer) Send(m *ChallengeValidateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PathwarService_ServiceDesc is the grpc.ServiceDesc for PathwarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PathwarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pathwar.v1.PathwarService",
	HandlerType: (*PathwarServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterUser",
			Handler:       _PathwarService_RegisterUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Leaderboard",
			Handler:       _PathwarService_Leaderboard_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Resources",
			Handler:       _PathwarService_Resources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Tournaments",
			Handler:       _PathwarService_Tournaments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Challenge",
			Handler:       _PathwarService_Challenge_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChallengeListing",
			Handler:       _PathwarService_ChallengeListing_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChallengeValidate",
			Handler:       _PathwarService_ChallengeValidate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pathwar/v1/pathwar.proto",
}
