// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package freelancepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FreelanceServiceClient is the client API for FreelanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreelanceServiceClient interface {
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	UpdateProfile(ctx context.Context, in *SellerProfileRequest, opts ...grpc.CallOption) (*SellerProfileResponse, error)
	AddGig(ctx context.Context, in *GigAddRequest, opts ...grpc.CallOption) (*GigAddResponse, error)
	GigList(ctx context.Context, in *GigListRequest, opts ...grpc.CallOption) (*GigListResponse, error)
	GigListUser(ctx context.Context, in *GigListUserRequest, opts ...grpc.CallOption) (*GigListResponse, error)
	GigData(ctx context.Context, in *GigDataRequest, opts ...grpc.CallOption) (*GigResponse, error)
}

type freelanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreelanceServiceClient(cc grpc.ClientConnInterface) FreelanceServiceClient {
	return &freelanceServiceClient{cc}
}

func (c *freelanceServiceClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/freelance.v1.FreelanceService/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelanceServiceClient) UpdateProfile(ctx context.Context, in *SellerProfileRequest, opts ...grpc.CallOption) (*SellerProfileResponse, error) {
	out := new(SellerProfileResponse)
	err := c.cc.Invoke(ctx, "/freelance.v1.FreelanceService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelanceServiceClient) AddGig(ctx context.Context, in *GigAddRequest, opts ...grpc.CallOption) (*GigAddResponse, error) {
	out := new(GigAddResponse)
	err := c.cc.Invoke(ctx, "/freelance.v1.FreelanceService/AddGig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelanceServiceClient) GigList(ctx context.Context, in *GigListRequest, opts ...grpc.CallOption) (*GigListResponse, error) {
	out := new(GigListResponse)
	err := c.cc.Invoke(ctx, "/freelance.v1.FreelanceService/GigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelanceServiceClient) GigListUser(ctx context.Context, in *GigListUserRequest, opts ...grpc.CallOption) (*GigListResponse, error) {
	out := new(GigListResponse)
	err := c.cc.Invoke(ctx, "/freelance.v1.FreelanceService/GigListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freelanceServiceClient) GigData(ctx context.Context, in *GigDataRequest, opts ...grpc.CallOption) (*GigResponse, error) {
	out := new(GigResponse)
	err := c.cc.Invoke(ctx, "/freelance.v1.FreelanceService/GigData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreelanceServiceServer is the server API for FreelanceService service.
// All implementations must embed UnimplementedFreelanceServiceServer
// for forward compatibility
type FreelanceServiceServer interface {
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
	UpdateProfile(context.Context, *SellerProfileRequest) (*SellerProfileResponse, error)
	AddGig(context.Context, *GigAddRequest) (*GigAddResponse, error)
	GigList(context.Context, *GigListRequest) (*GigListResponse, error)
	GigListUser(context.Context, *GigListUserRequest) (*GigListResponse, error)
	GigData(context.Context, *GigDataRequest) (*GigResponse, error)
	mustEmbedUnimplementedFreelanceServiceServer()
}

// UnimplementedFreelanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFreelanceServiceServer struct {
}

func (UnimplementedFreelanceServiceServer) Report(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedFreelanceServiceServer) UpdateProfile(context.Context, *SellerProfileRequest) (*SellerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedFreelanceServiceServer) AddGig(context.Context, *GigAddRequest) (*GigAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGig not implemented")
}
func (UnimplementedFreelanceServiceServer) GigList(context.Context, *GigListRequest) (*GigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GigList not implemented")
}
func (UnimplementedFreelanceServiceServer) GigListUser(context.Context, *GigListUserRequest) (*GigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GigListUser not implemented")
}
func (UnimplementedFreelanceServiceServer) GigData(context.Context, *GigDataRequest) (*GigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GigData not implemented")
}
func (UnimplementedFreelanceServiceServer) mustEmbedUnimplementedFreelanceServiceServer() {}

// UnsafeFreelanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreelanceServiceServer will
// result in compilation errors.
type UnsafeFreelanceServiceServer interface {
	mustEmbedUnimplementedFreelanceServiceServer()
}

func RegisterFreelanceServiceServer(s grpc.ServiceRegistrar, srv FreelanceServiceServer) {
	s.RegisterService(&FreelanceService_ServiceDesc, srv)
}

func _FreelanceService_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelanceServiceServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freelance.v1.FreelanceService/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelanceServiceServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelanceService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelanceServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freelance.v1.FreelanceService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelanceServiceServer).UpdateProfile(ctx, req.(*SellerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelanceService_AddGig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelanceServiceServer).AddGig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freelance.v1.FreelanceService/AddGig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelanceServiceServer).AddGig(ctx, req.(*GigAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelanceService_GigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelanceServiceServer).GigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freelance.v1.FreelanceService/GigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelanceServiceServer).GigList(ctx, req.(*GigListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelanceService_GigListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelanceServiceServer).GigListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freelance.v1.FreelanceService/GigListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelanceServiceServer).GigListUser(ctx, req.(*GigListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreelanceService_GigData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreelanceServiceServer).GigData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freelance.v1.FreelanceService/GigData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreelanceServiceServer).GigData(ctx, req.(*GigDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FreelanceService_ServiceDesc is the grpc.ServiceDesc for FreelanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreelanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "freelance.v1.FreelanceService",
	HandlerType: (*FreelanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _FreelanceService_Report_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _FreelanceService_UpdateProfile_Handler,
		},
		{
			MethodName: "AddGig",
			Handler:    _FreelanceService_AddGig_Handler,
		},
		{
			MethodName: "GigList",
			Handler:    _FreelanceService_GigList_Handler,
		},
		{
			MethodName: "GigListUser",
			Handler:    _FreelanceService_GigListUser_Handler,
		},
		{
			MethodName: "GigData",
			Handler:    _FreelanceService_GigData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/freelance/v1/freelance.proto",
}
