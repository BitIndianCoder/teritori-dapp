// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/sellerprofile/v1/sellerprofile.proto

package sellerprofilepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SellerprofileServiceClient is the client API for SellerprofileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellerprofileServiceClient interface {
	UpdateProfile(ctx context.Context, in *SellerProfileRequest, opts ...grpc.CallOption) (SellerprofileService_UpdateProfileClient, error)
}

type sellerprofileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSellerprofileServiceClient(cc grpc.ClientConnInterface) SellerprofileServiceClient {
	return &sellerprofileServiceClient{cc}
}

func (c *sellerprofileServiceClient) UpdateProfile(ctx context.Context, in *SellerProfileRequest, opts ...grpc.CallOption) (SellerprofileService_UpdateProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SellerprofileService_ServiceDesc.Streams[0], "/sellerprofile.v1.SellerprofileService/UpdateProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &sellerprofileServiceUpdateProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SellerprofileService_UpdateProfileClient interface {
	Recv() (*SellerProfileResponse, error)
	grpc.ClientStream
}

type sellerprofileServiceUpdateProfileClient struct {
	grpc.ClientStream
}

func (x *sellerprofileServiceUpdateProfileClient) Recv() (*SellerProfileResponse, error) {
	m := new(SellerProfileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SellerprofileServiceServer is the server API for SellerprofileService service.
// All implementations must embed UnimplementedSellerprofileServiceServer
// for forward compatibility
type SellerprofileServiceServer interface {
	UpdateProfile(*SellerProfileRequest, SellerprofileService_UpdateProfileServer) error
	mustEmbedUnimplementedSellerprofileServiceServer()
}

// UnimplementedSellerprofileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSellerprofileServiceServer struct {
}

func (UnimplementedSellerprofileServiceServer) UpdateProfile(*SellerProfileRequest, SellerprofileService_UpdateProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedSellerprofileServiceServer) mustEmbedUnimplementedSellerprofileServiceServer() {}

// UnsafeSellerprofileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellerprofileServiceServer will
// result in compilation errors.
type UnsafeSellerprofileServiceServer interface {
	mustEmbedUnimplementedSellerprofileServiceServer()
}

func RegisterSellerprofileServiceServer(s grpc.ServiceRegistrar, srv SellerprofileServiceServer) {
	s.RegisterService(&SellerprofileService_ServiceDesc, srv)
}

func _SellerprofileService_UpdateProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SellerProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SellerprofileServiceServer).UpdateProfile(m, &sellerprofileServiceUpdateProfileServer{stream})
}

type SellerprofileService_UpdateProfileServer interface {
	Send(*SellerProfileResponse) error
	grpc.ServerStream
}

type sellerprofileServiceUpdateProfileServer struct {
	grpc.ServerStream
}

func (x *sellerprofileServiceUpdateProfileServer) Send(m *SellerProfileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SellerprofileService_ServiceDesc is the grpc.ServiceDesc for SellerprofileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SellerprofileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sellerprofile.v1.SellerprofileService",
	HandlerType: (*SellerprofileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateProfile",
			Handler:       _SellerprofileService_UpdateProfile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/sellerprofile/v1/sellerprofile.proto",
}
