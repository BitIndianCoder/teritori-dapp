syntax = "proto3";

package marketplace.v1;
option go_package = "./marketplacepb";

service MarketplaceService {
  rpc Collections(CollectionsRequest) returns (stream CollectionsResponse);
  rpc NFTs(NFTsRequest) returns (stream NFTsResponse);
  rpc Quests(QuestsRequest) returns (stream QuestsResponse);
  rpc CollectionActivity(CollectionActivityRequest) returns (stream CollectionActivityResponse);
  rpc NFTActivity(NFTActivityRequest) returns (stream NFTActivityResponse);
  rpc NFTPriceHistory(NFTPriceHistoryRequest) returns (NFTPriceHistoryResponse);
}

enum Network {
  NETWORK_UNSPECIFIED = 0;
  NETWORK_FAKE = 1;
  NETWORK_TERITORI = 2;
  NETWORK_SOLANA = 3;
}

message NFT {
  string id = 1;
  Network network = 2;
  string image_uri = 3;
  string name = 4;
  string mint_address = 5;
  string price = 6;
  string denom = 7;
  bool is_listed = 8;
  string text_insert = 9;
  string collection_name = 10;
  string owner_id = 13;
}

message Collection {
  string id = 1;
  string image_uri = 2;
  string collection_name = 3;
  string creator_name = 4;
  bool verified = 5;
  string mint_address = 6;
  Network network = 7;
  string volume = 8;
  string volume_denom = 9;
}

message Activity {
  string id = 1;
  string transaction_kind = 2;
  string target_name = 3;
  string target_image_uri = 4;
  string contract_name = 5;
  string time = 6;
  string amount = 7;
  string denom = 8;
  string transaction_id = 9;
  string buyer_id = 10;
  string seller_id = 11;
}

message Quest {
  string id = 1;
  string title = 2;
  bool completed = 3;
}

message PriceDatum {
  string price = 1;
  string time = 2;
}

message CollectionsRequest {
  enum Kind {
    KIND_UNSPECIFIED = 0;
    KIND_BY_VOLUME = 1;
    KIND_BY_MARKETCAP = 2;
    KIND_FAKE = 3;
    KIND_UPCOMING = 4;
    KIND_TERITORI_FEATURES = 5;
  }

  Kind kind = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message CollectionsResponse {
  Collection collection = 1;
}

message NFTsRequest {
  int32 limit = 1;
  int32 offset = 2;

  string collection_id = 3;
  string owner_id = 4;
}

message NFTsResponse {
  NFT nft = 1;
}

message QuestsRequest {
  int32 limit = 1;
  int32 offset = 2;

  string user_id = 3;
}

message QuestsResponse {
  Quest quest = 1;
}

message CollectionActivityRequest {
  string id = 1;
  int32 limit = 3;
  int32 offset = 4;
}

message CollectionActivityResponse {
  Activity activity = 1;
}

message NFTActivityRequest {
  string id = 1;
  int32 limit = 3;
  int32 offset = 4;
}

message NFTActivityResponse {
  Activity activity = 1;
}

message NFTPriceHistoryRequest {
  string id = 1;
}

message NFTPriceHistoryResponse {
  repeated PriceDatum data = 1;
}
